# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]
          
# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку
print(list(map(list, zip(*[matrix[i] for i in range(len(matrix))]))))

# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
# Пример 1000-значного числа:
number = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""

import re

# оставляем только цифры, удаляя переносы строк и другой мусор
digits_list = re.findall("\d", number)

max_sum = 0
index = 0
for i in range(len(digits_list)-5):
    current_sum = 0
    for n in digits_list[i:i+5]:
        current_sum += int(n)
    if current_sum >= max_sum:
        index = i
        max_sum = current_sum

print(f"Максимальная сумма последовательности {max_sum}, начинается с {index}й позиции: {digits_list[index:index+5]}")

# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.

# координаты ферзей
fcoords = [(1, 2), (2, 4), (3, 6), (4, 8), (5, 3), (6, 1), (7,7), (8,5)]
# векторы ходов
fdeltas = [(0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1)]

yes = False
# проверяем для каждого ферзя клетки которые он бьет
for f in fcoords:
    for fdelta in fdeltas:
        fx = f[0]
        fy = f[1]
        # бегаем согласно заданным векторам
        while (1 <= fx <= 8) and (1 <= fy <= 8) and (not yes):
            # если бьем другого ферзя, ставим флажок и брейкаемся наружу
            if ((fx,fy) in fcoords) and ((fx,fy) != (f[0],f[1])):
                yes = True
                break
            fx += fdelta[0]
            fy += fdelta[1]
        if yes:
            break
    if yes:
        break

if yes:
    print("YES")
else:
    print("NO")
